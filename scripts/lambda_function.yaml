Resources:

  # ---------- IAM Roles ----------

  # IAM Role for S3 Lambda function
  LambdaS3ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  # IAM Role for API Lambda function
  LambdaApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /

  
  # ---------- IAM Policies ----------
  
  # Policy to grant S3 access to Lambda
  LambdaS3ExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaS3Access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - arn:aws:s3:::interface-diagram-files
              - arn:aws:s3:::interface-diagram-files/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
      Roles:
        - Ref: LambdaS3ExecutionRole
  
  # Policy to grant logging permissions to API Lambda
  LambdaApiExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaApiExecutionPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: '*'
      Roles:
        - Ref: LambdaApiExecutionRole

  
  # ---------- Lambda Layers ----------
  
  # Lambda Layer for S3 Lambda function
  S3LambdaLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: "s3_lambda_layer"
      Description: "s3_lambda_layer"
      Content:
        S3Bucket: "interface-diagram"
        S3Key: "lambda_s3_layer.zip"
      CompatibleRuntimes:
        - python3.8
  
  
  # ---------- Lambda Functions ----------
  
  # API Lambda function
  InterfaceDiagramApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: api_interface_diagram
      Handler: src/main/lambda_api_function.lambda_handler
      Role: !GetAtt [LambdaApiExecutionRole, Arn]
      Code:
        S3Bucket: interface-diagram
        S3Key: lambda_api_function.zip
      Runtime: python3.8
      Timeout: 15

  # S3 Lambda function
  InterfaceDiagramS3Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: s3_interface_diagram
      Handler: src/main/lambda_s3_function.lambda_handler
      Role: !GetAtt [LambdaS3ExecutionRole, Arn]
      Code:
        S3Bucket: interface-diagram  # Replace the bucket name by your S3 bucket that contains the lambda zip file
        S3Key: lambda_s3_function.zip
      Runtime: python3.8
      Timeout: 900 # Maximum timeout in seconds
      MemorySize: 1024 # Memory size in MB; 1024 is 1GB
      Layers:
        - !Ref S3LambdaLayer

  
  # ---------- API Gateway ----------

  # API definition
  InterfaceDiagramAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: InterfaceDiagramAPI
  
  # API method for POST
  InterfaceDiagramApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !GetAtt 
        - InterfaceDiagramAPI
        - RootResourceId
      RestApiId: !Ref InterfaceDiagramAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations"
          - Arn: !GetAtt InterfaceDiagramApiLambda.Arn
      AuthorizationType: NONE
  
  # API Deployment
  InterfaceDiagramApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: InterfaceDiagramApiMethod
    Properties:
      RestApiId: !Ref InterfaceDiagramAPI
  
  # API Permission for Lambda
  InterfaceDiagramApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InterfaceDiagramApiLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${InterfaceDiagramAPI}/*/POST/"
  
  # API Stage
  InterfaceDiagramApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Production Stage
      RestApiId: !Ref InterfaceDiagramAPI
      DeploymentId: !Ref InterfaceDiagramApiDeployment
  

  # ---------- Event Rules ----------
  
  # Cron event for S3 Lambda
  WeeklyS3LambdaTrigger:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "Trigger my Lambda function every weekday at 10:00 AM Madrid time"
      ScheduleExpression: "cron(0 8 ? * MON-FRI *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "InterfaceDiagramS3Lambda"
              - "Arn"
          Id: "TargetFunctionV1"

  # Permission for Cron event to invoke S3 Lambda
  PermissionForEventsToInvokeS3Lambda:
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: 
        Ref: "InterfaceDiagramS3Lambda"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "WeeklyS3LambdaTrigger"
          - "Arn"


# ---------- Outputs ----------

Outputs:
  ApiUrl:
    Description: The URL of the API Gateway for this stack
    Value: !Sub "https://${InterfaceDiagramAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"