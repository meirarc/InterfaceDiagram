Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
  LambdaExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaS3Access
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:ListBucket
              - s3:GetObject
              - s3:PutObject
              - s3:DeleteObject
            Resource:
              - arn:aws:s3:::interface-diagram-files
              - arn:aws:s3:::interface-diagram-files/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"
      Roles:
        - Ref: LambdaExecutionRole



  InterfaceDiagramLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InterfaceDiagram
      Handler: src/main/lambda_api_function.lambda_handler
      Role: arn:aws:iam::543421991131:role/lambda_role  # Replace with your IAM role ARN
      Code:
        S3Bucket: interface-diagram  # Create this bucket in S3
        S3Key: function_api.zip
      Runtime: python3.8
      Timeout: 15

  InterfaceDiagramLambdaS3:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: InterfaceDiagramS3
      Handler: src/main/lambda_s3_function.lambda_handler
      Role: !GetAtt [LambdaExecutionRole, Arn]
      Code:
        S3Bucket: interface-diagram  # Create this bucket in S3
        S3Key: function_s3.zip
      Runtime: python3.8
      Timeout: 15

  InterfaceDiagramAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: InterfaceDiagramAPI
  
  InterfaceDiagramDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: InterfaceDiagramMethod
    Properties:
      RestApiId: !Ref InterfaceDiagramAPI
  
  InterfaceDiagramMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !GetAtt 
        - InterfaceDiagramAPI
        - RootResourceId
      RestApiId: !Ref InterfaceDiagramAPI
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub 
          - "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Arn}/invocations"
          - Arn: !GetAtt InterfaceDiagramLambda.Arn
      AuthorizationType: NONE
  
  InterfaceDiagramPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt InterfaceDiagramLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${InterfaceDiagramAPI}/*/POST/"
  InterfaceDiagramStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Production Stage
      RestApiId: !Ref InterfaceDiagramAPI
      DeploymentId: !Ref InterfaceDiagramDeployment
  
  WeeklyLambdaTrigger:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "Trigger my Lambda function every weekday at 10:00 AM Madrid time"
      ScheduleExpression: "cron(0 8 ? * MON-FRI *)"
      State: "ENABLED"
      Targets: 
        - 
          Arn: 
            Fn::GetAtt: 
              - "InterfaceDiagramLambdaS3"
              - "Arn"
          Id: "TargetFunctionV1"

  PermissionForEventsToInvokeLambda:
    Type: "AWS::Lambda::Permission"
    Properties: 
      FunctionName: 
        Ref: "InterfaceDiagramLambdaS3"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn: 
        Fn::GetAtt: 
          - "WeeklyLambdaTrigger"
          - "Arn"

Outputs:
  ApiUrl:
    Description: The URL of the API Gateway for this stack
    Value: !Sub "https://${InterfaceDiagramAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"